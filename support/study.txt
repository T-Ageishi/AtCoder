・文字列の扱い
・オーバーフロー

・ソート
ABC323 B

・自作ソート
スコアを小数で算出して比較すると誤差が気になるので、ソート関数を自作して対応する例
https://atcoder.jp/contests/abc308/tasks/abc308_c/editorial

・小数
https://blog.hamayanhamayan.com/entry/2019/08/19/024027
割り算は整数同士でやると、整数の結果となってしまうので、A[i]もdoubleで取得して、全体的にdoubleで計算しよう。

・計算過程に巨大な数が現れる場合の対処
https://atcoder.jp/contests/abc169/tasks/abc169_b
https://blog.hamayanhamayan.com/entry/2020/06/01/210505

1.多倍長整数を使う
多倍長整数は無限（というと語弊があるが）の大きさの整数を扱える整数。
pythonであれば、普通に整数を作るとこれになるが、C++ではそうではない。
long longを使っても10^18くらいが上限なので、10^18を何回もかけると上限を超えてしまう。
->超えるとどうなるかは整数オーバーフロー辺りで調べる。
->2の補数表現とかを調べるとよいかも。
C++でやるのは辛いので、pythonで解こう！！！！！！

2.上限付き掛け算を使う
10^18より大きい場合は、何でもいいみたいなパターンが出てきたら上限付き掛け算を使うのもあり。
上限（infl）を決めておいて、infl<abを満たすならinflを返すようにしてやる。
infl<abを満たす判別は浮動小数点を使ってもいいし、lobを使ってもいいが、infl/b<aと変形するのが良いらしい。
結果も安定するし、そこまで遅くはない。

・modNの場所に止まる系がむずい
https://atcoder.jp/contests/abc268/tasks/abc268_c